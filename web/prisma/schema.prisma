generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Ladder {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  users     User[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  phoneNumber      String?
  accounts         Account[]
  sessions         Session[]
  firstName        String?
  lastName         String?
  ladders          Ladder[]
  ustaInfo         UstaInfo?
  winnerOneMatches Match[]   @relation("winnerOne")
  winnerTwoMatches Match[]   @relation("winnerTwo")
  loserOneMatches  Match[]   @relation("loserOne")
  loserTwoMatches  Match[]   @relation("loserTwo")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UstaInfo {
  id         Int    @id @default(autoincrement())
  ustaNumber String @unique
  userId     String @unique
  ntrpRating String
  user       User   @relation(fields: [userId], references: [id])
}

model Match {
  id          Int      @id @default(autoincrement())
  matchDate   DateTime @default(now())
  winnerOneId String
  winnerTwoId String?
  loserOneId  String
  loserTwoId  String?
  winnerOne   User     @relation("winnerOne", fields: [winnerOneId], references: [id])
  winnerTwo   User?    @relation("winnerTwo", fields: [winnerTwoId], references: [id])
  loserOne    User     @relation("loserOne", fields: [loserOneId], references: [id])
  loserTwo    User?    @relation("loserTwo", fields: [loserTwoId], references: [id])
  sets        Set[]
}

model Set {
  id                       Int   @id @default(autoincrement())
  matchId                  Int
  match                    Match @relation(fields: [matchId], references: [id])
  setNumber                Int
  matchWinnerScore         Int
  matchLoserScore          Int
  matchWinnerTiebreakScore Int?
  matchLoserTiebreakScore  Int?
}
